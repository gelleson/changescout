// Code generated by ent, DO NOT EDIT.

package website

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/predicate"
	"github.com/gelleson/changescout/changescout/pkg/crons"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldName, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldURL, v))
}

// Cron applies equality check predicate on the "cron" field. It's identical to CronEQ.
func Cron(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldEQ(FieldCron, vc))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldEnabled, v))
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v string) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldMode, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldUserID, v))
}

// NextCheckAt applies equality check predicate on the "next_check_at" field. It's identical to NextCheckAtEQ.
func NextCheckAt(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldNextCheckAt, v))
}

// LastCheckAt applies equality check predicate on the "last_check_at" field. It's identical to LastCheckAtEQ.
func LastCheckAt(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldLastCheckAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Website {
	return predicate.Website(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Website {
	return predicate.Website(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Website {
	return predicate.Website(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Website {
	return predicate.Website(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Website {
	return predicate.Website(sql.FieldContainsFold(FieldName, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Website {
	return predicate.Website(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Website {
	return predicate.Website(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Website {
	return predicate.Website(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Website {
	return predicate.Website(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Website {
	return predicate.Website(sql.FieldContainsFold(FieldURL, v))
}

// CronEQ applies the EQ predicate on the "cron" field.
func CronEQ(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldEQ(FieldCron, vc))
}

// CronNEQ applies the NEQ predicate on the "cron" field.
func CronNEQ(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldNEQ(FieldCron, vc))
}

// CronIn applies the In predicate on the "cron" field.
func CronIn(vs ...crons.CronExpression) predicate.Website {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Website(sql.FieldIn(FieldCron, v...))
}

// CronNotIn applies the NotIn predicate on the "cron" field.
func CronNotIn(vs ...crons.CronExpression) predicate.Website {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Website(sql.FieldNotIn(FieldCron, v...))
}

// CronGT applies the GT predicate on the "cron" field.
func CronGT(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldGT(FieldCron, vc))
}

// CronGTE applies the GTE predicate on the "cron" field.
func CronGTE(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldGTE(FieldCron, vc))
}

// CronLT applies the LT predicate on the "cron" field.
func CronLT(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldLT(FieldCron, vc))
}

// CronLTE applies the LTE predicate on the "cron" field.
func CronLTE(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldLTE(FieldCron, vc))
}

// CronContains applies the Contains predicate on the "cron" field.
func CronContains(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldContains(FieldCron, vc))
}

// CronHasPrefix applies the HasPrefix predicate on the "cron" field.
func CronHasPrefix(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldHasPrefix(FieldCron, vc))
}

// CronHasSuffix applies the HasSuffix predicate on the "cron" field.
func CronHasSuffix(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldHasSuffix(FieldCron, vc))
}

// CronEqualFold applies the EqualFold predicate on the "cron" field.
func CronEqualFold(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldEqualFold(FieldCron, vc))
}

// CronContainsFold applies the ContainsFold predicate on the "cron" field.
func CronContainsFold(v crons.CronExpression) predicate.Website {
	vc := string(v)
	return predicate.Website(sql.FieldContainsFold(FieldCron, vc))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldEnabled, v))
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v string) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldMode, v))
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v string) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldMode, v))
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...string) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldMode, vs...))
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...string) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldMode, vs...))
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v string) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldMode, v))
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v string) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldMode, v))
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v string) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldMode, v))
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v string) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldMode, v))
}

// ModeContains applies the Contains predicate on the "mode" field.
func ModeContains(v string) predicate.Website {
	return predicate.Website(sql.FieldContains(FieldMode, v))
}

// ModeHasPrefix applies the HasPrefix predicate on the "mode" field.
func ModeHasPrefix(v string) predicate.Website {
	return predicate.Website(sql.FieldHasPrefix(FieldMode, v))
}

// ModeHasSuffix applies the HasSuffix predicate on the "mode" field.
func ModeHasSuffix(v string) predicate.Website {
	return predicate.Website(sql.FieldHasSuffix(FieldMode, v))
}

// ModeEqualFold applies the EqualFold predicate on the "mode" field.
func ModeEqualFold(v string) predicate.Website {
	return predicate.Website(sql.FieldEqualFold(FieldMode, v))
}

// ModeContainsFold applies the ContainsFold predicate on the "mode" field.
func ModeContainsFold(v string) predicate.Website {
	return predicate.Website(sql.FieldContainsFold(FieldMode, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Website {
	return predicate.Website(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Website {
	return predicate.Website(sql.FieldNotNull(FieldUserID))
}

// NextCheckAtEQ applies the EQ predicate on the "next_check_at" field.
func NextCheckAtEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldNextCheckAt, v))
}

// NextCheckAtNEQ applies the NEQ predicate on the "next_check_at" field.
func NextCheckAtNEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldNextCheckAt, v))
}

// NextCheckAtIn applies the In predicate on the "next_check_at" field.
func NextCheckAtIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldNextCheckAt, vs...))
}

// NextCheckAtNotIn applies the NotIn predicate on the "next_check_at" field.
func NextCheckAtNotIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldNextCheckAt, vs...))
}

// NextCheckAtGT applies the GT predicate on the "next_check_at" field.
func NextCheckAtGT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldNextCheckAt, v))
}

// NextCheckAtGTE applies the GTE predicate on the "next_check_at" field.
func NextCheckAtGTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldNextCheckAt, v))
}

// NextCheckAtLT applies the LT predicate on the "next_check_at" field.
func NextCheckAtLT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldNextCheckAt, v))
}

// NextCheckAtLTE applies the LTE predicate on the "next_check_at" field.
func NextCheckAtLTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldNextCheckAt, v))
}

// LastCheckAtEQ applies the EQ predicate on the "last_check_at" field.
func LastCheckAtEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldLastCheckAt, v))
}

// LastCheckAtNEQ applies the NEQ predicate on the "last_check_at" field.
func LastCheckAtNEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldLastCheckAt, v))
}

// LastCheckAtIn applies the In predicate on the "last_check_at" field.
func LastCheckAtIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldLastCheckAt, vs...))
}

// LastCheckAtNotIn applies the NotIn predicate on the "last_check_at" field.
func LastCheckAtNotIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldLastCheckAt, vs...))
}

// LastCheckAtGT applies the GT predicate on the "last_check_at" field.
func LastCheckAtGT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldLastCheckAt, v))
}

// LastCheckAtGTE applies the GTE predicate on the "last_check_at" field.
func LastCheckAtGTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldLastCheckAt, v))
}

// LastCheckAtLT applies the LT predicate on the "last_check_at" field.
func LastCheckAtLT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldLastCheckAt, v))
}

// LastCheckAtLTE applies the LTE predicate on the "last_check_at" field.
func LastCheckAtLTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldLastCheckAt, v))
}

// LastCheckAtIsNil applies the IsNil predicate on the "last_check_at" field.
func LastCheckAtIsNil() predicate.Website {
	return predicate.Website(sql.FieldIsNull(FieldLastCheckAt))
}

// LastCheckAtNotNil applies the NotNil predicate on the "last_check_at" field.
func LastCheckAtNotNil() predicate.Website {
	return predicate.Website(sql.FieldNotNull(FieldLastCheckAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Website {
	return predicate.Website(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Website {
	return predicate.Website(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Website {
	return predicate.Website(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Website {
	return predicate.Website(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Website) predicate.Website {
	return predicate.Website(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Website) predicate.Website {
	return predicate.Website(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Website) predicate.Website {
	return predicate.Website(sql.NotPredicates(p))
}
