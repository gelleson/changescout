// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gelleson/changescout/changescout/internal/app/services/diff"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/check"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/website"
	"github.com/google/uuid"
)

// Check is the model entity for the Check schema.
type Check struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// WebsiteID holds the value of the "website_id" field.
	WebsiteID uuid.UUID `json:"website_id,omitempty"`
	// Result holds the value of the "result" field.
	Result []byte `json:"result,omitempty"`
	// HasError holds the value of the "has_error" field.
	HasError bool `json:"has_error,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// HasDiff holds the value of the "has_diff" field.
	HasDiff bool `json:"has_diff,omitempty"`
	// DiffChange holds the value of the "diff_change" field.
	DiffChange *diff.Result `json:"diff_change,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckQuery when eager-loading is set.
	Edges        CheckEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CheckEdges holds the relations/edges for other nodes in the graph.
type CheckEdges struct {
	// Website holds the value of the website edge.
	Website *Website `json:"website,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WebsiteOrErr returns the Website value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckEdges) WebsiteOrErr() (*Website, error) {
	if e.Website != nil {
		return e.Website, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: website.Label}
	}
	return nil, &NotLoadedError{edge: "website"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Check) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case check.FieldResult, check.FieldDiffChange:
			values[i] = new([]byte)
		case check.FieldHasError, check.FieldHasDiff:
			values[i] = new(sql.NullBool)
		case check.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case check.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case check.FieldID, check.FieldWebsiteID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Check fields.
func (c *Check) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case check.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case check.FieldWebsiteID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field website_id", values[i])
			} else if value != nil {
				c.WebsiteID = *value
			}
		case check.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil {
				c.Result = *value
			}
		case check.FieldHasError:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_error", values[i])
			} else if value.Valid {
				c.HasError = value.Bool
			}
		case check.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				c.ErrorMessage = value.String
			}
		case check.FieldHasDiff:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_diff", values[i])
			} else if value.Valid {
				c.HasDiff = value.Bool
			}
		case check.FieldDiffChange:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field diff_change", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.DiffChange); err != nil {
					return fmt.Errorf("unmarshal field diff_change: %w", err)
				}
			}
		case check.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Check.
// This includes values selected through modifiers, order, etc.
func (c *Check) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryWebsite queries the "website" edge of the Check entity.
func (c *Check) QueryWebsite() *WebsiteQuery {
	return NewCheckClient(c.config).QueryWebsite(c)
}

// Update returns a builder for updating this Check.
// Note that you need to call Check.Unwrap() before calling this method if this Check
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Check) Update() *CheckUpdateOne {
	return NewCheckClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Check entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Check) Unwrap() *Check {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Check is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Check) String() string {
	var builder strings.Builder
	builder.WriteString("Check(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("website_id=")
	builder.WriteString(fmt.Sprintf("%v", c.WebsiteID))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", c.Result))
	builder.WriteString(", ")
	builder.WriteString("has_error=")
	builder.WriteString(fmt.Sprintf("%v", c.HasError))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(c.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("has_diff=")
	builder.WriteString(fmt.Sprintf("%v", c.HasDiff))
	builder.WriteString(", ")
	builder.WriteString("diff_change=")
	builder.WriteString(fmt.Sprintf("%v", c.DiffChange))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Checks is a parsable slice of Check.
type Checks []*Check
