// Code generated by ent, DO NOT EDIT.

package check

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldID, id))
}

// WebsiteID applies equality check predicate on the "website_id" field. It's identical to WebsiteIDEQ.
func WebsiteID(v uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldWebsiteID, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v []byte) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldResult, v))
}

// HasError applies equality check predicate on the "has_error" field. It's identical to HasErrorEQ.
func HasError(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHasError, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldErrorMessage, v))
}

// HasDiff applies equality check predicate on the "has_diff" field. It's identical to HasDiffEQ.
func HasDiff(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHasDiff, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldCreatedAt, v))
}

// WebsiteIDEQ applies the EQ predicate on the "website_id" field.
func WebsiteIDEQ(v uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldWebsiteID, v))
}

// WebsiteIDNEQ applies the NEQ predicate on the "website_id" field.
func WebsiteIDNEQ(v uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldWebsiteID, v))
}

// WebsiteIDIn applies the In predicate on the "website_id" field.
func WebsiteIDIn(vs ...uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldWebsiteID, vs...))
}

// WebsiteIDNotIn applies the NotIn predicate on the "website_id" field.
func WebsiteIDNotIn(vs ...uuid.UUID) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldWebsiteID, vs...))
}

// WebsiteIDIsNil applies the IsNil predicate on the "website_id" field.
func WebsiteIDIsNil() predicate.Check {
	return predicate.Check(sql.FieldIsNull(FieldWebsiteID))
}

// WebsiteIDNotNil applies the NotNil predicate on the "website_id" field.
func WebsiteIDNotNil() predicate.Check {
	return predicate.Check(sql.FieldNotNull(FieldWebsiteID))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v []byte) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v []byte) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...[]byte) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...[]byte) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v []byte) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v []byte) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v []byte) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v []byte) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldResult, v))
}

// HasErrorEQ applies the EQ predicate on the "has_error" field.
func HasErrorEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHasError, v))
}

// HasErrorNEQ applies the NEQ predicate on the "has_error" field.
func HasErrorNEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldHasError, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Check {
	return predicate.Check(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.Check {
	return predicate.Check(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.Check {
	return predicate.Check(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldErrorMessage, v))
}

// HasDiffEQ applies the EQ predicate on the "has_diff" field.
func HasDiffEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHasDiff, v))
}

// HasDiffNEQ applies the NEQ predicate on the "has_diff" field.
func HasDiffNEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldHasDiff, v))
}

// DiffChangeIsNil applies the IsNil predicate on the "diff_change" field.
func DiffChangeIsNil() predicate.Check {
	return predicate.Check(sql.FieldIsNull(FieldDiffChange))
}

// DiffChangeNotNil applies the NotNil predicate on the "diff_change" field.
func DiffChangeNotNil() predicate.Check {
	return predicate.Check(sql.FieldNotNull(FieldDiffChange))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldCreatedAt, v))
}

// HasWebsite applies the HasEdge predicate on the "website" edge.
func HasWebsite() predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, WebsiteTable, WebsiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebsiteWith applies the HasEdge predicate on the "website" edge with a given conditions (other predicates).
func HasWebsiteWith(preds ...predicate.Website) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := newWebsiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Check) predicate.Check {
	return predicate.Check(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Check) predicate.Check {
	return predicate.Check(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Check) predicate.Check {
	return predicate.Check(sql.NotPredicates(p))
}
