// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gelleson/changescout/changescout/internal/domain"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/notification"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/predicate"
	"github.com/google/uuid"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NotificationUpdate) SetName(s string) *NotificationUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableName(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetType sets the "type" field.
func (nu *NotificationUpdate) SetType(dt domain.NotificationType) *NotificationUpdate {
	nu.mutation.SetType(dt)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableType(dt *domain.NotificationType) *NotificationUpdate {
	if dt != nil {
		nu.SetType(*dt)
	}
	return nu
}

// SetToken sets the "token" field.
func (nu *NotificationUpdate) SetToken(s string) *NotificationUpdate {
	nu.mutation.SetToken(s)
	return nu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableToken(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetToken(*s)
	}
	return nu
}

// ClearToken clears the value of the "token" field.
func (nu *NotificationUpdate) ClearToken() *NotificationUpdate {
	nu.mutation.ClearToken()
	return nu
}

// SetUserID sets the "user_id" field.
func (nu *NotificationUpdate) SetUserID(u uuid.UUID) *NotificationUpdate {
	nu.mutation.SetUserID(u)
	return nu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableUserID(u *uuid.UUID) *NotificationUpdate {
	if u != nil {
		nu.SetUserID(*u)
	}
	return nu
}

// SetWebsiteID sets the "website_id" field.
func (nu *NotificationUpdate) SetWebsiteID(u uuid.UUID) *NotificationUpdate {
	nu.mutation.SetWebsiteID(u)
	return nu
}

// SetNillableWebsiteID sets the "website_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableWebsiteID(u *uuid.UUID) *NotificationUpdate {
	if u != nil {
		nu.SetWebsiteID(*u)
	}
	return nu
}

// ClearWebsiteID clears the value of the "website_id" field.
func (nu *NotificationUpdate) ClearWebsiteID() *NotificationUpdate {
	nu.mutation.ClearWebsiteID()
	return nu
}

// SetDestination sets the "destination" field.
func (nu *NotificationUpdate) SetDestination(s string) *NotificationUpdate {
	nu.mutation.SetDestination(s)
	return nu
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableDestination(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetDestination(*s)
	}
	return nu
}

// ClearDestination clears the value of the "destination" field.
func (nu *NotificationUpdate) ClearDestination() *NotificationUpdate {
	nu.mutation.ClearDestination()
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NotificationUpdate) SetCreatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCreatedAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotificationUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.Name(); ok {
		if err := notification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Notification.name": %w`, err)}
		}
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(notification.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeString, value)
	}
	if value, ok := nu.mutation.Token(); ok {
		_spec.SetField(notification.FieldToken, field.TypeString, value)
	}
	if nu.mutation.TokenCleared() {
		_spec.ClearField(notification.FieldToken, field.TypeString)
	}
	if value, ok := nu.mutation.UserID(); ok {
		_spec.SetField(notification.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := nu.mutation.WebsiteID(); ok {
		_spec.SetField(notification.FieldWebsiteID, field.TypeUUID, value)
	}
	if nu.mutation.WebsiteIDCleared() {
		_spec.ClearField(notification.FieldWebsiteID, field.TypeUUID)
	}
	if value, ok := nu.mutation.Destination(); ok {
		_spec.SetField(notification.FieldDestination, field.TypeString, value)
	}
	if nu.mutation.DestinationCleared() {
		_spec.ClearField(notification.FieldDestination, field.TypeString)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetName sets the "name" field.
func (nuo *NotificationUpdateOne) SetName(s string) *NotificationUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableName(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetType sets the "type" field.
func (nuo *NotificationUpdateOne) SetType(dt domain.NotificationType) *NotificationUpdateOne {
	nuo.mutation.SetType(dt)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableType(dt *domain.NotificationType) *NotificationUpdateOne {
	if dt != nil {
		nuo.SetType(*dt)
	}
	return nuo
}

// SetToken sets the "token" field.
func (nuo *NotificationUpdateOne) SetToken(s string) *NotificationUpdateOne {
	nuo.mutation.SetToken(s)
	return nuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableToken(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetToken(*s)
	}
	return nuo
}

// ClearToken clears the value of the "token" field.
func (nuo *NotificationUpdateOne) ClearToken() *NotificationUpdateOne {
	nuo.mutation.ClearToken()
	return nuo
}

// SetUserID sets the "user_id" field.
func (nuo *NotificationUpdateOne) SetUserID(u uuid.UUID) *NotificationUpdateOne {
	nuo.mutation.SetUserID(u)
	return nuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableUserID(u *uuid.UUID) *NotificationUpdateOne {
	if u != nil {
		nuo.SetUserID(*u)
	}
	return nuo
}

// SetWebsiteID sets the "website_id" field.
func (nuo *NotificationUpdateOne) SetWebsiteID(u uuid.UUID) *NotificationUpdateOne {
	nuo.mutation.SetWebsiteID(u)
	return nuo
}

// SetNillableWebsiteID sets the "website_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableWebsiteID(u *uuid.UUID) *NotificationUpdateOne {
	if u != nil {
		nuo.SetWebsiteID(*u)
	}
	return nuo
}

// ClearWebsiteID clears the value of the "website_id" field.
func (nuo *NotificationUpdateOne) ClearWebsiteID() *NotificationUpdateOne {
	nuo.mutation.ClearWebsiteID()
	return nuo
}

// SetDestination sets the "destination" field.
func (nuo *NotificationUpdateOne) SetDestination(s string) *NotificationUpdateOne {
	nuo.mutation.SetDestination(s)
	return nuo
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableDestination(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetDestination(*s)
	}
	return nuo
}

// ClearDestination clears the value of the "destination" field.
func (nuo *NotificationUpdateOne) ClearDestination() *NotificationUpdateOne {
	nuo.mutation.ClearDestination()
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NotificationUpdateOne) SetCreatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCreatedAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotificationUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.Name(); ok {
		if err := notification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Notification.name": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(notification.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Token(); ok {
		_spec.SetField(notification.FieldToken, field.TypeString, value)
	}
	if nuo.mutation.TokenCleared() {
		_spec.ClearField(notification.FieldToken, field.TypeString)
	}
	if value, ok := nuo.mutation.UserID(); ok {
		_spec.SetField(notification.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := nuo.mutation.WebsiteID(); ok {
		_spec.SetField(notification.FieldWebsiteID, field.TypeUUID, value)
	}
	if nuo.mutation.WebsiteIDCleared() {
		_spec.ClearField(notification.FieldWebsiteID, field.TypeUUID)
	}
	if value, ok := nuo.mutation.Destination(); ok {
		_spec.SetField(notification.FieldDestination, field.TypeString, value)
	}
	if nuo.mutation.DestinationCleared() {
		_spec.ClearField(notification.FieldDestination, field.TypeString)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
