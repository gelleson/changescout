// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/check"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/notification"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/schema"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/user"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/website"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	checkFields := schema.Check{}.Fields()
	_ = checkFields
	// checkDescResult is the schema descriptor for result field.
	checkDescResult := checkFields[2].Descriptor()
	// check.ResultValidator is a validator for the "result" field. It is called by the builders before save.
	check.ResultValidator = checkDescResult.Validators[0].(func([]byte) error)
	// checkDescHasError is the schema descriptor for has_error field.
	checkDescHasError := checkFields[3].Descriptor()
	// check.DefaultHasError holds the default value on creation for the has_error field.
	check.DefaultHasError = checkDescHasError.Default.(bool)
	// checkDescHasDiff is the schema descriptor for has_diff field.
	checkDescHasDiff := checkFields[5].Descriptor()
	// check.DefaultHasDiff holds the default value on creation for the has_diff field.
	check.DefaultHasDiff = checkDescHasDiff.Default.(bool)
	// checkDescID is the schema descriptor for id field.
	checkDescID := checkFields[0].Descriptor()
	// check.DefaultID holds the default value on creation for the id field.
	check.DefaultID = checkDescID.Default.(func() uuid.UUID)
	notificationFields := schema.Notification{}.Fields()
	_ = notificationFields
	// notificationDescName is the schema descriptor for name field.
	notificationDescName := notificationFields[1].Descriptor()
	// notification.NameValidator is a validator for the "name" field. It is called by the builders before save.
	notification.NameValidator = notificationDescName.Validators[0].(func(string) error)
	// notificationDescUpdatedAt is the schema descriptor for updated_at field.
	notificationDescUpdatedAt := notificationFields[8].Descriptor()
	// notification.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	notification.DefaultUpdatedAt = notificationDescUpdatedAt.Default.(func() time.Time)
	// notification.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	notification.UpdateDefaultUpdatedAt = notificationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// notificationDescID is the schema descriptor for id field.
	notificationDescID := notificationFields[0].Descriptor()
	// notification.DefaultID holds the default value on creation for the id field.
	notification.DefaultID = notificationDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[1].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[2].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[6].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[8].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	websiteFields := schema.Website{}.Fields()
	_ = websiteFields
	// websiteDescName is the schema descriptor for name field.
	websiteDescName := websiteFields[1].Descriptor()
	// website.NameValidator is a validator for the "name" field. It is called by the builders before save.
	website.NameValidator = func() func(string) error {
		validators := websiteDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// websiteDescURL is the schema descriptor for url field.
	websiteDescURL := websiteFields[2].Descriptor()
	// website.URLValidator is a validator for the "url" field. It is called by the builders before save.
	website.URLValidator = func() func(string) error {
		validators := websiteDescURL.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(url string) error {
			for _, fn := range fns {
				if err := fn(url); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// websiteDescCron is the schema descriptor for cron field.
	websiteDescCron := websiteFields[3].Descriptor()
	// website.CronValidator is a validator for the "cron" field. It is called by the builders before save.
	website.CronValidator = func() func(string) error {
		validators := websiteDescCron.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(cron string) error {
			for _, fn := range fns {
				if err := fn(cron); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// websiteDescEnabled is the schema descriptor for enabled field.
	websiteDescEnabled := websiteFields[4].Descriptor()
	// website.DefaultEnabled holds the default value on creation for the enabled field.
	website.DefaultEnabled = websiteDescEnabled.Default.(bool)
	// websiteDescMode is the schema descriptor for mode field.
	websiteDescMode := websiteFields[5].Descriptor()
	// website.DefaultMode holds the default value on creation for the mode field.
	website.DefaultMode = websiteDescMode.Default.(string)
	// websiteDescCreatedAt is the schema descriptor for created_at field.
	websiteDescCreatedAt := websiteFields[10].Descriptor()
	// website.DefaultCreatedAt holds the default value on creation for the created_at field.
	website.DefaultCreatedAt = websiteDescCreatedAt.Default.(func() time.Time)
	// websiteDescUpdatedAt is the schema descriptor for updated_at field.
	websiteDescUpdatedAt := websiteFields[11].Descriptor()
	// website.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	website.DefaultUpdatedAt = websiteDescUpdatedAt.Default.(func() time.Time)
	// website.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	website.UpdateDefaultUpdatedAt = websiteDescUpdatedAt.UpdateDefault.(func() time.Time)
	// websiteDescID is the schema descriptor for id field.
	websiteDescID := websiteFields[0].Descriptor()
	// website.DefaultID holds the default value on creation for the id field.
	website.DefaultID = websiteDescID.Default.(func() uuid.UUID)
}
