// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChecksColumns holds the columns for the "checks" table.
	ChecksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "result", Type: field.TypeBytes},
		{Name: "has_error", Type: field.TypeBool, Default: false},
		{Name: "error_message", Type: field.TypeString, Nullable: true},
		{Name: "has_diff", Type: field.TypeBool, Default: false},
		{Name: "diff_change", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "website_id", Type: field.TypeUUID, Nullable: true},
	}
	// ChecksTable holds the schema information for the "checks" table.
	ChecksTable = &schema.Table{
		Name:       "checks",
		Columns:    ChecksColumns,
		PrimaryKey: []*schema.Column{ChecksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "checks_websites_website",
				Columns:    []*schema.Column{ChecksColumns[7]},
				RefColumns: []*schema.Column{WebsitesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "token", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "website_id", Type: field.TypeUUID, Nullable: true},
		{Name: "destination", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"admin", "user"}},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[3]},
			},
		},
	}
	// WebsitesColumns holds the columns for the "websites" table.
	WebsitesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "url", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "cron", Type: field.TypeString, Size: 255},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "mode", Type: field.TypeString, Default: "plain"},
		{Name: "setting", Type: field.TypeJSON},
		{Name: "next_check_at", Type: field.TypeTime},
		{Name: "last_check_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeUUID, Nullable: true},
	}
	// WebsitesTable holds the schema information for the "websites" table.
	WebsitesTable = &schema.Table{
		Name:       "websites",
		Columns:    WebsitesColumns,
		PrimaryKey: []*schema.Column{WebsitesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "websites_users_user",
				Columns:    []*schema.Column{WebsitesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChecksTable,
		NotificationsTable,
		UsersTable,
		WebsitesTable,
	}
)

func init() {
	ChecksTable.ForeignKeys[0].RefTable = WebsitesTable
	WebsitesTable.ForeignKeys[0].RefTable = UsersTable
	WebsitesTable.Annotation = &entsql.Annotation{
		Table: "websites",
	}
}
