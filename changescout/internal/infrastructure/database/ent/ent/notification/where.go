// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gelleson/changescout/changescout/internal/domain"
	"github.com/gelleson/changescout/changescout/internal/infrastructure/database/ent/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldEQ(FieldType, vc))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldToken, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// WebsiteID applies equality check predicate on the "website_id" field. It's identical to WebsiteIDEQ.
func WebsiteID(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldWebsiteID, v))
}

// Destination applies equality check predicate on the "destination" field. It's identical to DestinationEQ.
func Destination(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldDestination, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...domain.NotificationType) predicate.Notification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Notification(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...domain.NotificationType) predicate.Notification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Notification(sql.FieldNotIn(FieldType, v...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldGT(FieldType, vc))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldGTE(FieldType, vc))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldLT(FieldType, vc))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldLTE(FieldType, vc))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldContains(FieldType, vc))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldHasPrefix(FieldType, vc))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldHasSuffix(FieldType, vc))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldEqualFold(FieldType, vc))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v domain.NotificationType) predicate.Notification {
	vc := string(v)
	return predicate.Notification(sql.FieldContainsFold(FieldType, vc))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldToken, v))
}

// TokenIsNil applies the IsNil predicate on the "token" field.
func TokenIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldToken))
}

// TokenNotNil applies the NotNil predicate on the "token" field.
func TokenNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldToken))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldToken, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUserID, v))
}

// WebsiteIDEQ applies the EQ predicate on the "website_id" field.
func WebsiteIDEQ(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldWebsiteID, v))
}

// WebsiteIDNEQ applies the NEQ predicate on the "website_id" field.
func WebsiteIDNEQ(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldWebsiteID, v))
}

// WebsiteIDIn applies the In predicate on the "website_id" field.
func WebsiteIDIn(vs ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldWebsiteID, vs...))
}

// WebsiteIDNotIn applies the NotIn predicate on the "website_id" field.
func WebsiteIDNotIn(vs ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldWebsiteID, vs...))
}

// WebsiteIDGT applies the GT predicate on the "website_id" field.
func WebsiteIDGT(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldWebsiteID, v))
}

// WebsiteIDGTE applies the GTE predicate on the "website_id" field.
func WebsiteIDGTE(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldWebsiteID, v))
}

// WebsiteIDLT applies the LT predicate on the "website_id" field.
func WebsiteIDLT(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldWebsiteID, v))
}

// WebsiteIDLTE applies the LTE predicate on the "website_id" field.
func WebsiteIDLTE(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldWebsiteID, v))
}

// WebsiteIDIsNil applies the IsNil predicate on the "website_id" field.
func WebsiteIDIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldWebsiteID))
}

// WebsiteIDNotNil applies the NotNil predicate on the "website_id" field.
func WebsiteIDNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldWebsiteID))
}

// DestinationEQ applies the EQ predicate on the "destination" field.
func DestinationEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldDestination, v))
}

// DestinationNEQ applies the NEQ predicate on the "destination" field.
func DestinationNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldDestination, v))
}

// DestinationIn applies the In predicate on the "destination" field.
func DestinationIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldDestination, vs...))
}

// DestinationNotIn applies the NotIn predicate on the "destination" field.
func DestinationNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldDestination, vs...))
}

// DestinationGT applies the GT predicate on the "destination" field.
func DestinationGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldDestination, v))
}

// DestinationGTE applies the GTE predicate on the "destination" field.
func DestinationGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldDestination, v))
}

// DestinationLT applies the LT predicate on the "destination" field.
func DestinationLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldDestination, v))
}

// DestinationLTE applies the LTE predicate on the "destination" field.
func DestinationLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldDestination, v))
}

// DestinationContains applies the Contains predicate on the "destination" field.
func DestinationContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldDestination, v))
}

// DestinationHasPrefix applies the HasPrefix predicate on the "destination" field.
func DestinationHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldDestination, v))
}

// DestinationHasSuffix applies the HasSuffix predicate on the "destination" field.
func DestinationHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldDestination, v))
}

// DestinationIsNil applies the IsNil predicate on the "destination" field.
func DestinationIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldDestination))
}

// DestinationNotNil applies the NotNil predicate on the "destination" field.
func DestinationNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldDestination))
}

// DestinationEqualFold applies the EqualFold predicate on the "destination" field.
func DestinationEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldDestination, v))
}

// DestinationContainsFold applies the ContainsFold predicate on the "destination" field.
func DestinationContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldDestination, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.NotPredicates(p))
}
