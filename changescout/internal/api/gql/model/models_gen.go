// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/gelleson/changescout/changescout/internal/domain"
	"github.com/gelleson/changescout/changescout/pkg/crons"
	"github.com/google/uuid"
)

type AuthSignInByPasswordInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AuthSignUpByPasswordInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type AuthStatus struct {
	Success      *bool   `json:"success,omitempty"`
	AccessToken  *string `json:"accessToken,omitempty"`
	RefreshToken *string `json:"refreshToken,omitempty"`
}

type Mutation struct {
}

type NotificationCreateInput struct {
	Name        string                  `json:"name"`
	Type        domain.NotificationType `json:"type"`
	Token       *string                 `json:"token,omitempty"`
	Destination *string                 `json:"destination,omitempty"`
	WebsiteID   *uuid.UUID              `json:"websiteId,omitempty"`
}

type NotificationFilters struct {
	WebsiteID *uuid.UUID `json:"websiteId,omitempty"`
	FromDate  *time.Time `json:"fromDate,omitempty"`
	ToDate    *time.Time `json:"toDate,omitempty"`
}

type NotificationUpdateInput struct {
	ID          uuid.UUID               `json:"id"`
	Name        string                  `json:"name"`
	Type        domain.NotificationType `json:"type"`
	Token       *string                 `json:"token,omitempty"`
	Destination *string                 `json:"destination,omitempty"`
	WebsiteID   *uuid.UUID              `json:"websiteId,omitempty"`
}

type Query struct {
}

type SettingInput struct {
	UserAgent     *string  `json:"user_agent,omitempty"`
	Referer       *string  `json:"referer,omitempty"`
	Method        Method   `json:"method"`
	Template      *string  `json:"template,omitempty"`
	Deduplication *bool    `json:"deduplication,omitempty"`
	Trim          *bool    `json:"trim,omitempty"`
	Sort          *bool    `json:"sort,omitempty"`
	Selectors     []string `json:"selectors,omitempty"`
	JSONPath      []string `json:"json_path,omitempty"`
}

type WebsiteCreateInput struct {
	URL     string               `json:"url"`
	Name    string               `json:"name"`
	Enabled bool                 `json:"enabled"`
	Mode    domain.Mode          `json:"mode"`
	Cron    crons.CronExpression `json:"cron"`
	Setting *SettingInput        `json:"setting"`
}

type WebsitePreview struct {
	Result string `json:"result"`
}

type WebsiteUpdateInput struct {
	ID      uuid.UUID             `json:"id"`
	Name    *string               `json:"name,omitempty"`
	URL     *string               `json:"url,omitempty"`
	Enabled *bool                 `json:"enabled,omitempty"`
	Mode    *domain.Mode          `json:"mode,omitempty"`
	Cron    *crons.CronExpression `json:"cron,omitempty"`
	Setting *SettingInput         `json:"setting,omitempty"`
}

type Method string

const (
	MethodGet    Method = "GET"
	MethodPost   Method = "POST"
	MethodPut    Method = "PUT"
	MethodDelete Method = "DELETE"
	MethodPatch  Method = "PATCH"
)

var AllMethod = []Method{
	MethodGet,
	MethodPost,
	MethodPut,
	MethodDelete,
	MethodPatch,
}

func (e Method) IsValid() bool {
	switch e {
	case MethodGet, MethodPost, MethodPut, MethodDelete, MethodPatch:
		return true
	}
	return false
}

func (e Method) String() string {
	return string(e)
}

func (e *Method) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Method(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Method", str)
	}
	return nil
}

func (e Method) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
