package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"net/http"
	"time"

	gql "github.com/gelleson/changescout/changescout/internal/api/gql/generated"
	"github.com/gelleson/changescout/changescout/internal/api/gql/model"
	httpplatform "github.com/gelleson/changescout/changescout/internal/api/http"
	"github.com/gelleson/changescout/changescout/internal/domain"
	"github.com/gelleson/changescout/changescout/internal/platform/logger"
	"github.com/gelleson/changescout/changescout/internal/utils/transform"
	"go.uber.org/zap"
)

// SignInByPassword is the resolver for the signInByPassword field.
func (r *mutationResolver) SignInByPassword(ctx context.Context, input *model.AuthSignInByPasswordInput) (*model.AuthStatus, error) {
	log := logger.FromContext(ctx)
	token, err := r.AuthUseCase.AuthenticateByPassword(ctx, input.Email, input.Password)
	if err != nil {
		if domain.IsUnauthenticated(err) {
			return nil, domain.ErrInvalidCredentials
		}

		log.Error(
			"auth error",
			zap.Error(err),
		)
		return nil, domain.ErrInvalidCredentials
	}

	e, _ := httpplatform.EchoFromContext(ctx)
	e.SetCookie(
		&http.Cookie{
			Name:     "accessToken",
			Path:     "/",
			Value:    token,
			HttpOnly: true,
			Expires:  time.Now().Add(time.Hour * 24),
		},
	)

	return &model.AuthStatus{
		Success:      transform.ToPtr(true),
		AccessToken:  &token,
		RefreshToken: &token,
	}, nil
}

// SignUpByPassword is the resolver for the signUpByPassword field.
func (r *mutationResolver) SignUpByPassword(ctx context.Context, input *model.AuthSignUpByPasswordInput) (*model.AuthStatus, error) {
	log := logger.FromContext(ctx)

	token, err := r.AuthUseCase.RegistrationByPassword(ctx, input.FirstName, input.LastName, input.Email, input.Password)
	if err != nil {
		log.Error(
			"failed to register user",
			zap.Error(err),
		)
		return nil, domain.ErrInvalidCredentials
	}

	e, _ := httpplatform.EchoFromContext(ctx)
	e.SetCookie(
		&http.Cookie{
			Name:     "accessToken",
			Path:     "/",
			Value:    token,
			HttpOnly: true,
			Expires:  time.Now().Add(time.Hour * 24),
		},
	)
	return &model.AuthStatus{
		Success:      transform.ToPtr(true),
		AccessToken:  &token,
		RefreshToken: &token,
	}, nil
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
