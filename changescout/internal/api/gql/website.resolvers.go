package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/gelleson/changescout/changescout/internal/api/gql/model"
	"github.com/gelleson/changescout/changescout/internal/domain"
	"github.com/gelleson/changescout/changescout/internal/pkg/contexts"
	"github.com/gelleson/changescout/changescout/internal/platform/logger"
	"github.com/gelleson/changescout/changescout/internal/utils/transform"
	"github.com/gelleson/changescout/changescout/pkg/diff"
	"github.com/google/uuid"
	"go.uber.org/zap"
)

// CreateWebsite is the resolver for the createWebsite field.
func (r *mutationResolver) CreateWebsite(ctx context.Context, input model.WebsiteCreateInput) (*domain.Website, error) {
	log := logger.FromContext(ctx)
	user, _ := contexts.UserContext(ctx)
	site, err := r.WebsiteUseCase.Create(ctx, user.ID, domain.Website{
		URL:     input.URL,
		Name:    input.Name,
		Enabled: input.Enabled,
		Mode:    input.Mode,
		Cron:    input.Cron,
		Setting: buildSetting(input.Setting),
		UserID:  user.ID,
	})
	if err != nil {
		log.Error(
			"failed to create website",
			zap.Error(err),
		)
		return nil, err
	}
	return &site, nil
}

// UpdateWebsite is the resolver for the updateWebsite field.
func (r *mutationResolver) UpdateWebsite(ctx context.Context, input model.WebsiteUpdateInput) (*domain.Website, error) {
	user, _ := contexts.UserContext(ctx)

	site, err := r.WebsiteUseCase.GetByID(ctx, user.ID, input.ID)
	if err != nil {
		return nil, err
	}

	if input.Setting == nil {
		input.Setting = &model.SettingInput{}
	}

	_site, err := r.WebsiteUseCase.Update(ctx, user.ID, site.ID, domain.Website{
		ID:      site.ID,
		Name:    diff.GetNewValueOrOldValue(input.Name, site.Name),
		URL:     diff.GetNewValueOrOldValue(input.URL, site.URL),
		Enabled: diff.GetNewValueOrOldValue(input.Enabled, site.Enabled),
		Mode:    diff.GetNewValueOrOldValue(input.Mode, site.Mode),
		Cron:    diff.GetNewValueOrOldValue(input.Cron, site.Cron),
		Setting: buildSetting(&model.SettingInput{
			UserAgent: transform.ToPtr(diff.GetNewValueOrOldValue(input.Setting.UserAgent, site.Setting.UserAgent)),
			Selectors: diff.SliceDiffChecker(site.Setting.Selectors, input.Setting.Selectors),
			Referer:   transform.ToPtr(diff.GetNewValueOrOldValue(input.Setting.Referer, site.Setting.Referer)),
			Trim:      transform.ToPtr(diff.GetNewValueOrOldValue(input.Setting.Trim, site.Setting.Trim)),
			Sort:      transform.ToPtr(diff.GetNewValueOrOldValue(input.Setting.Sort, site.Setting.Sort)),
			JSONPath:  diff.SliceDiffChecker(site.Setting.JSONPath, input.Setting.JSONPath),
			Method:    diff.GetNewValueOrOldValue(transform.ToPtr(input.Setting.Method), model.Method(site.Setting.Method)),
		}),
		UserID:      site.UserID,
		LastCheckAt: site.LastCheckAt,
	})

	if err != nil {
		return nil, err
	}
	return &_site, nil
}

// ChangeWebsiteStatus is the resolver for the changeWebsiteStatus field.
func (r *mutationResolver) ChangeWebsiteStatus(ctx context.Context, id uuid.UUID, enabled bool) (*domain.Website, error) {
	user, _ := contexts.UserContext(ctx)
	site, err := r.WebsiteUseCase.UpdateStatus(ctx, user.ID, id, enabled)
	if err != nil {
		return nil, err
	}
	return &site, nil
}

// DeleteWebsite is the resolver for the deleteWebsite field.
func (r *mutationResolver) DeleteWebsite(ctx context.Context, id uuid.UUID) (bool, error) {
	user, _ := contexts.UserContext(ctx)
	err := r.WebsiteUseCase.Delete(ctx, user.ID, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// GetWebsiteByID is the resolver for the getWebsiteByID field.
func (r *queryResolver) GetWebsiteByID(ctx context.Context, id uuid.UUID) (*domain.Website, error) {
	user, _ := contexts.UserContext(ctx)
	site, err := r.WebsiteUseCase.GetByID(ctx, user.ID, id)
	if err != nil {
		return nil, err
	}
	return &site, nil
}

// GetWebsiteByURL is the resolver for the getWebsiteByURL field.
func (r *queryResolver) GetWebsiteByURL(ctx context.Context, url string) (*domain.Website, error) {
	user, _ := contexts.UserContext(ctx)
	site, err := r.WebsiteUseCase.GetByURL(ctx, user.ID, url)
	if err != nil {
		return nil, err
	}
	return &site, nil
}

// GetWebsites is the resolver for the getWebsites field.
func (r *queryResolver) GetWebsites(ctx context.Context) ([]*domain.Website, error) {
	user, _ := contexts.UserContext(ctx)
	sites, err := r.WebsiteUseCase.GetByUserID(ctx, user.ID, domain.Pagination{})
	if err != nil {
		return nil, err
	}
	return transform.MapObjects(sites, func(t domain.Website) *domain.Website {
		return &t
	}), nil
}
